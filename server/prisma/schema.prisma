// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RECRUITER
  CANDIDATE
  ADMIN
}

enum TypeOfWork {
  FULL_TIME
  PART_TIME
}

enum Experience {
  FROM_0_TO_1
  FROM_1_TO_2
  FROM_2_TO_4
  FROM_4_TO_6
  FROM_6
}

model Location {
  id        String     @id @default(cuid())
  title     String
  userInfos UserInfo[]
  vacancies Vacancy[]
}

model UserInfo {
  id           String      @id @default(cuid())
  firstName    String
  lastName     String
  email        String      @unique
  typeOfWork   TypeOfWork?
  experience   Experience
  salary       Int?
  location     Location?   @relation(fields: [locationId], references: [id])
  locationId   String?
  isLookingFor Boolean
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @unique
}

model User {
  id           String        @id @default(cuid())
  nickname     String        @unique
  password     String
  role         Role          @default(CANDIDATE)
  userInfo     UserInfo?
  skills       Skill[]
  specialties  Specialty[]
  company      Company?      @relation(fields: [companyId], references: [id])
  companyId    String?
  applications Application[]
}

model Skill {
  id        String    @id @default(cuid())
  title     String    @unique
  users     User[]
  vacancies Vacancy[]
}

model Specialty {
  id    String @id @default(cuid())
  title String @unique
  users User[]
}

model Company {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  size        Int?
  link        String?
  users       User[]
  vacancy     Vacancy[]
}

model Vacancy {
  id           String        @id @default(cuid())
  title        String
  description  String
  minSalary    Int?
  maxSalary    Int?
  experience   Experience
  isRemote     Boolean
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   String
  skills       Skill[]
  benefits     Benefit[]
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  applications Application[]
}

model Benefit {
  id        String    @id @default(cuid())
  title     String    @unique
  vacancies Vacancy[]
}

model Application {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
  vacancyId String
  status    Status  @default(NOT_VIEWED)
  message   String?

  @@id([userId, vacancyId], name: "userId_vacancyId")
}

enum Status {
  NOT_VIEWED
  VIEWED
  INVITATION
  REFUSED
}
